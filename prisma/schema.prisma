generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Form      Form[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Field {
  id          String    @id @default(cuid())
  label       String
  type        FieldType
  required    Boolean
  placeholder String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  formId      String
  Form        Form      @relation(fields: [formId], references: [id])
}

model Form {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  fields      Field[]
  owner       User     @relation(fields: [ownerId], references: [id])
}

model Conversation {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id             String        @id @default(cuid())
  content        String
  createdAt      DateTime      @default(now())
  conversationId String?
  agent          MessageAgents
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
}

enum FieldType {
  TEXT
  TEXTAREA
  NUMBER
  EMAIL
  PASSWORD
  MULTIPLECHOICE
  CHECKBOX
  DROPDOWN
  DATE
  SCALE
}

enum MessageAgents {
  SYSTEM
  USER
  ASSISTANT
}
